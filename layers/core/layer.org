In this layer we try to set up all the bare minimum necessary configurations
to edit basic files

TODO: Add general to define keys

TODO: Better ciw
- javascript, camel-case
- elisp quote

* Lexical scoping
We want to set lexical scoping for this config file.
Provides a small boost

#+BEGIN_SRC emacs-lisp :tangle config.el
  ;;; -*- lexical-binding: t -*-
#+END_SRC
* Installation
** Use-package
Installation and configuration of the use-package macro
[[https://github.com/jwiegley/use-package][Project homepage]]


#+BEGIN_SRC emacs-lisp :tangle install.el
;; Install package use-package
(straight-use-package 'use-package)
#+END_SRC

We use straight.el, this way, we do note depend on the packages.el, also
it would be possible to install any version (from git, melpa, etc...)
** Evil
Installation of the eVIl package, essential to the workflow

[[https://github.com/emacs-evil/evil][Project Homepage]]

#+BEGIN_SRC emacs-lisp :tangle install.el
;; Install package use-package
(straight-use-package 'evil)
#+END_SRC

** Key Chord
Installation of the key chord macro
[[https://www.emacswiki.org/emacs/KeyChord][Project Homepage]]

#+BEGIN_SRC emacs-lisp :tangle install.el
(straight-use-package
  '(key-chord :type git :host github :repo "emacsorphanage/key-chord"))
#+END_SRC

We also want to install key seq to get the order of the keystrokes
[[https://github.com/vlevit/key-seq.el][Project Homepage]]

#+BEGIN_SRC emacs-lisp :tangle install.el
(straight-use-package 'key-seq)
#+END_SRC

* Configuration
Configuration file is loaded when emacs is run as an editor
** Librairies
Librairies that should be in the global scope

** Visual preferences
UI Enhancements and preferences
*** Disable scrollbar
#+BEGIN_SRC emacs-lisp :tangle config.el
(scroll-bar-mode -1)
#+END_SRC
*** Disable menubar
#+BEGIN_SRC emacs-lisp :tangle config.el
(menu-bar-mode -1)
#+END_SRC
*** Disable toolbar
#+BEGIN_SRC emacs-lisp :tangle config.el
(tool-bar-mode -1)
#+END_SRC
*** Disable splash screen
#+BEGIN_SRC emacs-lisp :tangle config.el
(setq inhibit-startup-screen t)
#+END_SRC
*** Highlight line
We also want to highlight the current line by default

#+BEGIN_SRC emacs-lisp :tangle config.el
;; Enable highlighting current line for all modes
(global-hl-line-mode 1)
#+END_SRC

** Evil
We want to enable evil globally

#+BEGIN_SRC emacs-lisp :tangle config.el
(use-package evil
  :load-path "straight/build/evil"
  :config
  (evil-mode 1)

  (setq evil-want-Y-yank-to-eol t)
  (setq evil-visual-state-cursor '(hollow))

  (define-key evil-motion-state-map (kbd "SPC") nil)
  (define-key evil-motion-state-map "," nil)
  (define-key evil-motion-state-map "zz" nil)
  (define-key evil-motion-state-map "za" nil)
  (define-key evil-normal-state-map (kbd "g,") nil)

  (when (tron/has-feature-p 'dvorak)
    (define-key evil-motion-state-map "h" 'evil-previous-line)
    (define-key evil-motion-state-map "t" 'evil-next-line)
    (define-key evil-motion-state-map "n" 'evil-backward-char)
    (define-key evil-motion-state-map "s" 'evil-forward-char)

    (define-key evil-motion-state-map "l" 'evil-search-next)
    (define-key evil-motion-state-map "L" 'evil-search-backward)
    (define-key evil-normal-state-map "j"
      #'(lambda () (join-line 1))))

  (define-key evil-normal-state-map "J" 'join-line)
  ;; (define-key evil-normal-state-map "s" 'evil-forward-char)

  (define-key evil-insert-state-map (kbd "C-d") 'evil-delete-backward-char)
  )
#+END_SRC
** Key-Chord
Key chord is an extension to create two key strokes shortcut. Quite useful.

#+BEGIN_SRC emacs-lisp :tangle config.el
(use-package key-seq
    :load-path "straight/build/key-seq"
    :commands (key-seq-define))

(use-package key-chord
    :load-path "straight/build/key-chord"
    :config
    (setq key-chord-two-keys-delay 0.1) ;; default 0.1
    (setq key-chord-one-key-delay 0.2) ;; default 0.2
    (key-chord-mode 1)
    (when (tron/has-feature-p 'dvorak)
      (key-seq-define evil-insert-state-map "ht" 'evil-normal-state)
      (key-seq-define evil-replace-state-map "ht" 'evil-normal-state))
    (unless (tron/has-feature-p 'dvorak)
      (key-chord-define evil-insert-state-map "jk" 'evil-normal-state)
      (key-chord-define evil-replace-state-map "jk" 'evil-normal-state))
)
#+END_SRC
