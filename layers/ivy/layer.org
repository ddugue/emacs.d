Ivy is a generic completion framework. We can use it to search, files, buffers, select items from
lists, etc...

[[http://github.com/abo-abo/swiper][Project homepage]]

* Installation
** Checkup for other completion system
Right now the way that this layer is built is we allow ONE type of completion engine.
#+BEGIN_SRC emacs-lisp :tangle install.el
(when (tron/has-layer-p 'selectrum)
        (tron/message! "\u2717" :red "Ivy layer is incompatible with the selectrum layer")
        (kill-emacs 1))
#+END_SRC
** Ivy installation
#+BEGIN_SRC emacs-lisp :tangle install.el
;; Install package ivy
(straight-use-package 'ivy)
#+END_SRC

** Counsel installation
#+BEGIN_SRC emacs-lisp :tangle install.el
;; Install package
(straight-use-package 'counsel)
#+END_SRC


* Configuration
** Functions
*** Custom IVY hydra
Custom bindings for a custom hydra binding. It adds some functions to our IVY.
#+BEGIN_SRC emacs-lisp
(defun my/ivy-get-selection ()
    "Returns the selected ivy text"
    (expand-file-name ivy--current ivy--directory))

(defun my/ivy-append-yank ()
    "Append the current line to the current kill-ring (via a register"
    (interactive)
    (set-register 300 (concat (get-register 300) (my/ivy-get-selection) "\n")))

(defun my/ivy-override-yank ()
    "Override the latest kill-ring"
    (interactive)
    (kill-new (my/ivy-get-selection)))

(defun my/ivy-mark ()
    "Append the current line to the current kill-ring (via a register"
    (interactive)
    (set-register 400 (concat (get-register 400) ivy--current "\n")))

(defun my/ivy-mark-display-transformer (str)
    "Transform string -> string"
    (let ((reg (get-register 400)))
    (if (member str (when reg (split-string reg "\n")))
     (concat "* " str)
     str)))

#+END_SRC
*** Installation & Configuration of Ivy
We configure and install ivy, which is the Engine
#+BEGIN_SRC emacs-lisp :tangle config.el
(use-package ivy
  :diminish ivy-mode
  :load-path "straight/build/ivy"
  :commands (ivy-mode ivy-switch-buffer)
  :config
  (setq ivy-re-builders-alist
        '((ivy-switch-buffer . ivy--regex-fuzzy)
          (counsel-find-file . ivy--regex-fuzzy)
          (t . ivy--regex-plus)))

  (setq ivy-wrap t)
  (setq ivy-extra-directories nil)
  (setq ivy-height 28) ;; TODO, make responsive to minibuffer size

  (when (tron/has-feature-p 'dvorak)
    (general-define-key
     :keymaps 'ivy-minibuffer-map
     "C-S-J" 'ivy-scroll-down-command
     "C-j" 'ivy-next-line
     "C-S-K" 'ivy-scroll-up-command
     "C-k" 'ivy-previous-line
     "C-l" 'ivy-alt-done
     "<C-return>" 'ivy-immediate-done
     "C-S-T" 'ivy-scroll-down-command
     "C-t" 'ivy-next-line
     "C-S-H" 'ivy-scroll-up-command
     "C-h" 'ivy-previous-line
     "C-d" 'ivy-backward-delete-char
     "C-s" 'ivy-alt-done
     "<C-return>" 'ivy-immediate-done
     "C-n" 'ivy-backward-kill-word))
  :init
  (ivy-mode 1)
  )

#+END_SRC

*** Installation & Configuration of Counsel
We install and configure counsel, which uses ivy and provides some nice default funcions

#+BEGIN_SRC emacs-lisp :tangle config.el
(use-package counsel
  :load-path ("straight/build/counsel" "straight/build/swiper")
  :commands (counsel-find-file counse-locate counsel-describe-function counsel-describe-variable counsel-describe-face counsel-ag counsel-M-x swiper)
:init

  :config
    (setq counsel-find-file-ignore-regexp
        (concat
         ;; File names beginning with # or .
         "\\(?:\\`[#.]\\)"
         ;; File names ending with # or ~
         "\\|\\(?:\\`.+?[#~]\\'\\)"
         ;; File names ending in .pyc
         "\\|\\(?:\\`.+?\\.pyc\\'\\)"
         ;; File names ending in .elc
         "\\|\\(?:\\`.+?\\.elc\\'\\)"
         ;; File names ending in .eln
         "\\|\\(?:\\`.+?\\.eln\\'\\)"
         ))
)
#+END_SRC
