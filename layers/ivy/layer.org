Ivy is a generic completion framework. We can use it to search, files, buffers, select items from
lists, etc...

[[http://github.com/abo-abo/swiper][Project homepage]]
* Lexical scoping
We want to set lexical scoping for this config file.
Provides a small boost

#+BEGIN_SRC emacs-lisp :tangle config.el
  ;;; -*- lexical-binding: t -*-
#+END_SRC
* Check wether helm or ido is installed
#+BEGIN_SRC emacs-lisp :tangle config.el
(when (or (tron/has-layer-p 'ido) (tron/has-layer-p 'helm))
)
#+END_SRC
* Installation
** Ivy installation
#+BEGIN_SRC emacs-lisp :tangle install.el
;; Install package ivy
(straight-use-package 'ivy)
#+END_SRC

** Counsel installation
#+BEGIN_SRC emacs-lisp :tangle install.el
;; Install package
(straight-use-package 'counsel)
#+END_SRC

** Diminish installation
#+BEGIN_SRC emacs-lisp :tangle install.el
;; Install package
(straight-use-package 'diminish)
#+END_SRC

* Configuration
** Librairies
Librairies to enable globally when loading this layer
#+BEGIN_SRC emacs-lisp :tangle config.el
  (tron/load-package '(bind-key) 'bind-key)
  ;; (tron/load-package '(diminish) 'diminish)
#+END_SRC

** Functions
*** Custom IVY hydra
Custom bindings for a custom hydra binding. It adds some functions to our IVY.
#+BEGIN_SRC emacs-lisp :tangle config.el
  ;; (defun my/ivy-get-selection ()
  ;;     "Returns the selected ivy text"
  ;;     (expand-file-name ivy--current ivy--directory))

  ;; (defun my/ivy-append-yank ()
  ;;     "Append the current line to the current kill-ring (via a register"
  ;;     (interactive)
  ;;     (set-register 300 (concat (get-register 300) (my/ivy-get-selection) "\n")))

  ;; (defun my/ivy-override-yank ()
  ;;     "Override the latest kill-ring"
  ;;     (interactive)
  ;;     (kill-new (my/ivy-get-selection)))

  ;; (defun my/ivy-mark ()
  ;;     "Append the current line to the current kill-ring (via a register"
  ;;     (interactive)
  ;;     (set-register 400 (concat (get-register 400) ivy--current "\n")))

  ;; (defun my/ivy-mark-display-transformer (str)
  ;;     "Transform string -> string"
  ;;     (let ((reg (get-register 400)))
  ;;     (if (member str (when reg (split-string reg "\n")))
  ;;      (concat "* " str)
  ;;      str)))

#+END_SRC
*** Installtion & Configuration of Ivy
We configure and install ivy, which is the Engine
#+BEGIN_SRC emacs-lisp :tangle config.el
(tron/def-package! ivy
  :diminish ivy-mode
  :commands (ivy-mode ivy-completing-read)
  :bind
  (("C-x b" . ivy-switch-buffer)
   ("C-x f" . find-file)
   :map ivy-minibuffer-map
   ("<C-return>" . ivy-immediate-done)
   ("C-d" . ivy-backward-delete-char))

  :init
  (setq completing-read-function 'ivy-completing-read)

  :config
  (setq ivy-re-builders-alist
    '((ivy-switch-buffer . ivy--regex-fuzzy)
      (counsel-find-file . ivy--regex-fuzzy)
      (t . ivy--regex-plus)))

  (setq ivy-wrap t)
  (setq ivy-extra-directories nil)
  (setq ivy-height 25) ;; TODO, make responsive to minibuffer size

  ;; Dvorak specific bindings
  (when (tron/has-feature-p 'dvorak)
    (bind-keys :map ivy-minibuffer-map
      ("C-S-T" . ivy-scroll-down-command)
      ("C-t" . ivy-next-line)
      ("C-S-H" . ivy-scroll-up-command)
      ("C-h" . ivy-previous-line)
      ("C-s" . ivy-alt-done)))

  ;; Qwerty specific bindings
  (unless (tron/has-feature-p 'dvorak)
    (bind-keys :map ivy-minibuffer-map
      ("C-S-J" . ivy-scroll-down-command)
      ("C-j" . ivy-next-line)
      ("C-S-K" . ivy-scroll-up-command)
      ("C-k" . ivy-previous-line)
      ("C-l" . ivy-alt-done)))
)
  ;; (progn
  ;;   ;; Define a custom hydra
  ;;   (key-chord-define ivy-minibuffer-map "jk"
  ;;                     (defhydra hydra-ivy/body
  ;;                               (:post (when
  ;;                                  (get-register 300)
  ;;                                  (kill-new (get-register 300))
  ;;                                  (set-register 300 nil)))
  ;;                               "ivy"
  ;;                               ("j" ivy-next-line "down")
  ;;                               ("k" ivy-previous-line "up")
  ;;                               ("l" ivy-alt-done "forward")
  ;;                               ("h" ivy-backward-kill-word "back")
  ;;                               ("y" my/ivy-append-yank "yank")
  ;;                               ("m" my/ivy-mark "mark")
  ;;                               ("Y" my/ivy-override-yank "override")
  ;;                               ("i" nil "insert")))
  ;;       (key-chord-define ivy-minibuffer-map "ht"
  ;;                     (defhydra hydra-ivy/body
  ;;                               (:post (when
  ;;                                  (get-register 300)
  ;;                                  (kill-new (get-register 300))
  ;;                                  (set-register 300 nil)))
  ;;                               "ivy"
  ;;                               ("j" ivy-next-line "up")
  ;;                               ("k" ivy-previous-line "down")
  ;;                               ("s" ivy-alt-done "forward")
  ;;                               ("n" ivy-backward-kill-word "back")
  ;;                               ("y" my/ivy-append-yank "yank")
  ;;                               ("m" my/ivy-mark "mark")
  ;;                               ("Y" my/ivy-override-yank "override")
  ;;                               ("i" nil "insert")))))

#+END_SRC

*** Installation and configuration of Counsel
We install and configure counsel, which uses ivy and provides some nice default funcions

#+BEGIN_SRC emacs-lisp :tangle config.el
(use-package counsel
  :load-path ("straight/build/counsel" "straight/build/swiper")
  :commands (counsel-find-file)
  :bind
  (("C-x C-f" . counsel-find-file)
   ("C-x f"   . counsel-find-file))
  :config
  ;; (ivy-set-display-transformer 'counsel-find-file 'my/ivy-mark-display-transformer)
  (setq counsel-find-file-ignore-regexp
    (concat
      ;; File names beginning with # or .
      "\\(?:\\`[#.]\\)"
      ;; File names ending with # or ~
      "\\|\\(?:\\`.+?[#~]\\'\\)"
      ;; File names ending in .pyc
      "\\|\\(?:\\`.+?\\.pyc\\'\\)"
      ;; File names ending in .elc
      "\\|\\(?:\\`.+?\\.elc\\'\\)"))
)
#+END_SRC
